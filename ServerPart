
Функция НайтиСотрудника(ТабНомер)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВремТЗ
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Код ПОДОБНО &Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ ВремТЗ2
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Тип = &Тип
	|	И ФизическиеЛицаКонтактнаяИнформация.Вид = &Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТЗ.Ссылка КАК Ссылка,
	|	ВремТЗ2.НомерТелефона КАК НомерТелефона,
	|	ВремТЗ2.Представление КАК Представление,
	|	ВремТЗ.ФизическоеЛицо.Наименование КАК Наименование,
	|	ВремТЗ.ФизическоеЛицо.ДатаРождения КАК ДатаРождения,
	|	ВремТЗ.ФизическоеЛицо.Пол КАК Пол,
	|	ВремТЗ.ФизическоеЛицо.ИНН КАК ИНН,
	|	ВремТЗ.ФизическоеЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ВремТЗ.ФизическоеЛицо.ФИО КАК ФИО,
	|	ВремТЗ.ФизическоеЛицо.Фамилия КАК Фамилия,
	|	ВремТЗ.ФизическоеЛицо.Имя КАК Имя,
	|	ВремТЗ.ФизическоеЛицо.Отчество КАК Отчество,
	|	ВремТЗ.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВремТЗ КАК ВремТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТЗ2 КАК ВремТЗ2
	|		ПО ВремТЗ.ФизическоеЛицо = ВремТЗ2.Ссылка";
	Запрос.УстановитьПараметр("Код","%"+СокрЛП(ТабНомер)+"%");
	Запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекСтруктура = Новый Структура;
		ТекСтруктура.Вставить("Ссылка",Выборка.ссылка);
		ТекСтруктура.Вставить("НомерТелефона",Выборка.НомерТелефона);
		ТекСтруктура.Вставить("Представление",Выборка.Представление);
		ТекСтруктура.Вставить("Наименование",Выборка.Наименование);
		ТекСтруктура.Вставить("ФизическоеЛицо",Выборка.ФизическоеЛицо);
	
		Возврат ТекСтруктура;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
		
	
КонецФункции

Функция СобратьДанныеСотрудника(ТабНомер)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВремТЗ
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Код ПОДОБНО &Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ ВремТЗ2
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Тип = &Тип
	|	И ФизическиеЛицаКонтактнаяИнформация.Вид = &Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТЗ.Ссылка КАК Ссылка,
	|	ВремТЗ2.НомерТелефона КАК НомерТелефона,
	|	ВремТЗ2.Представление КАК Представление,
	|	ВремТЗ.ФизическоеЛицо.Наименование КАК Наименование,
	|	ВремТЗ.ФизическоеЛицо.ДатаРождения КАК ДатаРождения,
	|	ВремТЗ.ФизическоеЛицо.Пол КАК Пол,
	|	ВремТЗ.ФизическоеЛицо.ИНН КАК ИНН,
	|	ВремТЗ.ФизическоеЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ВремТЗ.ФизическоеЛицо.ФИО КАК ФИО,
	|	ВремТЗ.ФизическоеЛицо.Фамилия КАК Фамилия,
	|	ВремТЗ.ФизическоеЛицо.Имя КАК Имя,
	|	ВремТЗ.ФизическоеЛицо.Отчество КАК Отчество,
	|	ВремТЗ.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВремТЗ КАК ВремТЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТЗ2 КАК ВремТЗ2
	|		ПО ВремТЗ.ФизическоеЛицо = ВремТЗ2.Ссылка";
	Запрос.УстановитьПараметр("Код","%"+СокрЛП(ТабНомер)+"%");
	Запрос.УстановитьПараметр("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид",Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекСтруктура = Новый Структура;
		ТекСтруктура.Вставить("Ссылка",Выборка.ссылка);
		ТекСтруктура.Вставить("НомерТелефона",Выборка.НомерТелефона);
		ТекСтруктура.Вставить("Представление",Выборка.Представление);
		ТекСтруктура.Вставить("Наименование",Выборка.Наименование);
		ТекСтруктура.Вставить("ДатаРождения",Выборка.ДатаРождения);
		ТекСтруктура.Вставить("Пол",Строка(Выборка.Пол));
		ТекСтруктура.Вставить("ИНН",Выборка.ИНН);
		ТекСтруктура.Вставить("СтраховойНомерПФР",Выборка.СтраховойНомерПФР);
		ТекСтруктура.Вставить("ФИО",Выборка.ФИО);
		ТекСтруктура.Вставить("Фамилия",Выборка.Фамилия);
		ТекСтруктура.Вставить("Имя",Выборка.Имя);
		ТекСтруктура.Вставить("Отчество",Выборка.Отчество);
		ТекСтруктура.Вставить("РасчетныйЛисток",СформироватьФормуРасчетногоЛистка(Выборка.ФизическоеЛицо,ДобавитьМесяц(ТекущаяДата(),-1)));
		ТекСтруктура.Вставить("ОстатокОтпуска",СформироватьСправкуПоОтпускамСотрудника(Выборка.ФизическоеЛицо));
		
		УстановитьПривилегированныйРежим(Истина);

		ПоляДанных = 
		"ПолученныеОбразования,
		|СостояниеВБраке,
		|АдресМестаПроживанияПредставление,
		|ТелефонМобильныйПредставление,
		|ДокументПредставление,
		|СоставСемьи";
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, Выборка.ФизическоеЛицо, ПоляДанных);
		
		//ЗаполнитьОбразование(КадровыеДанные);
		ФизическоеЛицоОбразованиеТекст = "<" + НСтр("ru = 'не указано'") + ">";
		Если КадровыеДанные.Количество() > 0 Тогда
			ФизическоеЛицоОбразованиеТекст = КадровыеДанные[0].ПолученныеОбразования;
		КонецЕсли;
		ТекСтруктура.Вставить("ФизическоеЛицоОбразованиеТекст",ФизическоеЛицоОбразованиеТекст);
		
		//ЗаполнитьПаспорт(КадровыеДанные);
		ДокументУдостоверяющийЛичность = "<" + НСтр("ru = 'не указано'") + ">";
		Если КадровыеДанные.Количество() > 0 Тогда
			ДокументУдостоверяющийЛичность = КадровыеДанные[0].ДокументПредставление;
		КонецЕсли;
		ТекСтруктура.Вставить("ДокументУдостоверяющийЛичность",ДокументУдостоверяющийЛичность);

		//ЗаполнитьСостояниеВБраке(КадровыеДанные); 
		СостояниеВБраке = "";
		Если КадровыеДанные.Количество() > 0 Тогда
			СостояниеВБраке = Строка(КадровыеДанные[0].СостояниеВБраке);
		КонецЕсли;
		ТекСтруктура.Вставить("СостояниеВБраке",СостояниеВБраке);

		//ЗаполнитьКонтакты(КадровыеДанные);
		АдресМестаПроживания = "<" + НСтр("ru = 'не указано'") + ">";
		
		Если КадровыеДанные.Количество() > 0 Тогда
			АдресМестаПроживания = КадровыеДанные[0].АдресМестаПроживанияПредставление;
		КонецЕсли;
		ТекСтруктура.Вставить("АдресМестаПроживания",АдресМестаПроживания);
		
		//ЗаполнитьСоставСемьи();
		ПредставлениеСоставаСемьи = Справочники.РодственникиФизическихЛиц.ПредставлениеСоставаСемьи(Выборка.ФизическоеЛицо);
		
		Если ПустаяСтрока(ПредставлениеСоставаСемьи) Тогда
			СоставСемьи = "<" + НСтр("ru = 'не указано'") + ">";
		Иначе
			СоставСемьи = ПредставлениеСоставаСемьи;
		КонецЕсли;
		ТекСтруктура.Вставить("СоставСемьи",СоставСемьи);
		
		
		//Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		//	АдресФотографии = КадровыйУчетРасширенный.АдресФотографииФизическогоЛица(ФизическоеЛицо);		
		//КонецЕсли;
		
		ТекСтруктура.Вставить("Льготы",ПрочитатьДанныеЛьгот(Выборка.ФизическоеЛицо));
		ТекСтруктура.Вставить("График",СформироватьФормуГрафикаРаботыСотрудника(Выборка.ФизическоеЛицо));

		ТекСтруктура.Вставить("ВидСправки",СобратьВидыСправок());

		
		УстановитьПривилегированныйРежим(Ложь);
		
		
		Возврат ТекСтруктура;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
		
	
КонецФункции
//Получаем табельный номер, ищем его в сотрудниках
//Если есть сотрудник то смотрим есть ли у него телефон
//Отправляем на него СМС
//Отправляем в приложение код переданный в СМС для сверки

Функция SendSMS(TabNamber, Message)
	Если ЗначениеЗаполнено(TabNamber) Тогда
		ТекДанныеСотрудинка = НайтиСотрудника(TabNamber);
		Если ТекДанныеСотрудинка<>Неопределено Тогда
			ТекКод = ОтправитьКодКлиенту(ТекДанныеСотрудинка);
			Возврат ТекКод;
		Иначе
			Message = "Сотрудник не найден "+TabNamber;
			Возврат 1;
		КонецЕсли;
	Иначе
		Message = "Табельный номер не заполнен";
		Возврат 1
	КонецЕсли;
КонецФункции

Функция GetData(TabNamber, Message)
	// Вставить содержимое обработчика.
	ГлавСтруктура = Новый Структура;
	Если ЗначениеЗаполнено(TabNamber) Тогда
		ТекДанныеСотрудинка = СобратьДанныеСотрудника(TabNamber);
		Если ТекДанныеСотрудинка<>Неопределено Тогда
			ГлавСтруктура = ТекДанныеСотрудинка;
		КонецЕсли;
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(ГлавСтруктура, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДанных;  

КонецФункции
Функция ОтправитьКодКлиенту(Парам)
	//Если СокрЛП(Парам.НомерТелефона)<>"" Тогда
	//	ДатчикСЧ = Новый ГенераторСлучайныхЧисел();
	//	ТекКодСМС = Формат(Цел(ДатчикСЧ.СлучайноеЧисло(1000,9999)),"ЧГ=0");
	//	//ДопПараметрыСМС = Парам;//Новый Структура;
	//	//ДопПараметрыСМС.Вставить("КодСМС",ТекКодСМС);
	//	АдресСервера = "sms.ru";
	//	API_ID = "25386543-A528-631A-6E13-EE9853B9F973"; // СокрЛП(КлючАпи);
	//	ВремТелефон = "79058199883";   //ПолучитьТелефонКлиента(Парам.НомерТелефона);
	//	Телефон = "+7"+ВремТелефон;
	//	HTTPСоединение = Новый HTTPСоединение(АдресСервера);
	//	HTTPЗапрос = Новый HTTPЗапрос("https://sms.ru/sms/send?api_id="+API_ID+"&to="+ВремТелефон+"&msg="+Строка(ТекКодСМС)+"&json=0");
	//	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);    
	//	ТекстОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	//	
	//	Отправлено = ?(HTTPОтвет.КодСостояния = 200, Истина, Ложь); 	
	//	Если Отправлено Тогда	
	//		Возврат ТекКодСМС;
	//	Иначе
	//		Возврат 1;
	//	КонецЕсли;
	//Иначе
		Возврат 2;
	//КонецЕсли;	
	 
	
КонецФункции
&НаСервере
Функция ПолучитьТелефонКлиента(ВремТелефКлиента)
	//ВремТелефКлиента = Клиент.Телефон1;
	ВремТелефКлиента = СтрЗаменить(ВремТелефКлиента,"-","");
	ВремТелефКлиента = СтрЗаменить(ВремТелефКлиента," ","");
	ВремТелефКлиента = СтрЗаменить(ВремТелефКлиента,"(","");
	ВремТелефКлиента = СтрЗаменить(ВремТелефКлиента,")","");
	ВремТелефКлиента = СтрЗаменить(ВремТелефКлиента,"+","");
	ВремТелефКлиента = Прав(ВремТелефКлиента,10);
	Возврат ВремТелефКлиента;
КонецФункции

Функция СформироватьФормуРасчетногоЛистка(ТекФизЛицо,ТекМесяц)
	
	УстановитьПривилегированныйРежим(Истина);
	ТабличныйДокументРасчетныйЛисток = Новый ТабличныйДокумент;
	НачалоПериода = НачалоМесяца(ТекМесяц);
	ОкончаниеПериода = КонецМесяца(ТекМесяц);
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекФизЛицо);
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеПериода;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация";
	
	ДанныеФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	Если ДанныеФизическихЛиц.Количество() = 0 Тогда 
		Возврат ТабличныйДокументРасчетныйЛисток;
	КонецЕсли;
	
	КадровыеДанные = ДанныеФизическихЛиц[0];
	ДокументРезультат = Отчеты.АнализНачисленийИУдержаний.РасчетныйЛисток(ФизическиеЛица, КадровыеДанные.Организация, ОкончаниеПериода);
	
	ТабличныйДокументРасчетныйЛисток.Очистить();
	ТабличныйДокументРасчетныйЛисток.ТекущаяОбласть = ТабличныйДокументРасчетныйЛисток.Область(1, 1, 1, 1);
	ТабличныйДокументРасчетныйЛисток.Вывести(ДокументРезультат);
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТабличныйДокументРасчетныйЛисток;
КонецФункции
Функция СформироватьСправкуПоОтпускамСотрудника(ТекФизЛицо)
	ТабличныйДокументОстатокОтпуска = Новый ТабличныйДокумент;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокументОстатокОтпуска.Очистить();
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекФизЛицо);
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ФизическиеЛица, Ложь, Неопределено, ТекущаяДатаСеанса());
	
	Если ОсновныеСотрудники.Количество() > 0 Тогда 
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновныеСотрудники[0].Сотрудник);
		ТабДокумент = ОстаткиОтпусков.СправкаПоОтпускамСотрудника(СписокСотрудников, ТекущаяДатаСеанса());
		ТабличныйДокументОстатокОтпуска.Вывести(ТабДокумент);
	КонецЕсли;
	Возврат ТабличныйДокументОстатокОтпуска;
КонецФункции
Функция  ПрочитатьДанныеЛьгот(ТекФизическоеЛицо)
	
	ИспользоватьЛьготы = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеЛьготыСотрудников");
	ВыбранныеЛьготы = Новый ТаблицаЗначений;
	ВыбранныеЛьготы.Колонки.Добавить("Льгота");
	ВыбранныеЛьготы.Колонки.Добавить("Наименование");
	ВыбранныеЛьготы.Колонки.Добавить("Стоимость");
	
	ТекущиеЛьготы = Новый ФиксированныйМассив(Новый Массив);
	
	Если Не ИспользоватьЛьготы Тогда 
		Возврат ВыбранныеЛьготы;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПолученияДанных = ТекущаяДатаСеанса();
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаПолученияДанных;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаПолученияДанных;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекФизическоеЛицо);
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация, Подразделение, Должность, ДолжностьПоШтатномуРасписанию";
	
	ДанныеФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	ТаблицаОписанийПозиций = ЛьготыСотрудников.ТаблицаОписанийПозиций();
	
	Для Каждого ДанныеФизическогоЛица Из ДанныеФизическихЛиц Цикл 
	
		НоваяСтрока = ТаблицаОписанийПозиций.Добавить();
		НоваяСтрока.Организация = ДанныеФизическогоЛица.Организация;
		НоваяСтрока.Подразделение = ДанныеФизическогоЛица.Подразделение;
		НоваяСтрока.Должность = ДанныеФизическогоЛица.Должность;
		НоваяСтрока.Позиция = ДанныеФизическогоЛица.ДолжностьПоШтатномуРасписанию;
		
	КонецЦикла;
	
	Запрос = ЛьготыСотрудников.ЗапросДанныеЛимитовЛьготПозиций(ТаблицаОписанийПозиций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЛимитов = Новый Соответствие;
	
	ИспользоватьЛимит = Истина;
	РазмерЛимита = 0;
	ДоступныВсеЛьготы = Ложь;
	
	Пока Выборка.Следующий() Цикл
		ДанныеЛимита = ЛьготыСотрудников.СтруктураДанныхЛимита();
		ЗаполнитьЗначенияСвойств(ДанныеЛимита, Выборка);
		ДанныеЛимитов.Вставить(Выборка.Позиция, ДанныеЛимита); 
	КонецЦикла;
	
	Для Каждого ДанныеФизическогоЛица Из ДанныеФизическихЛиц Цикл
		
		ДанныеЛимита = ДанныеЛимитов[ДанныеФизическогоЛица.ДолжностьПоШтатномуРасписанию];
		Если ДанныеЛимита = Неопределено Или Не ДанныеЛимита.ИспользоватьЛимит Тогда 
			ИспользоватьЛимит = Ложь;
			РазмерЛимита = 0;
		КонецЕсли;
		
		Если ИспользоватьЛимит Тогда 
			РазмерЛимита = Макс(РазмерЛимита, ДанныеЛимита.КоличествоБаллов);
		КонецЕсли;
		
		Если ДанныеЛимита <> Неопределено И ДанныеЛимита.ДоступныВсеЛьготы Тогда
			ДоступныВсеЛьготы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	
	МассивВыбранныхЛьгот = ЛьготыСотрудников.ЛьготыФизическогоЛица(ДобавитьМесяц(НачалоМесяца(ДатаПолученияДанных), 1), ТекФизическоеЛицо);
	Если МассивВыбранныхЛьгот = Неопределено Тогда 
		МассивВыбранныхЛьгот = Новый Массив;
	КонецЕсли;
	
	МассивТекущихЛьгот = ЛьготыСотрудников.ЛьготыФизическогоЛица(НачалоМесяца(ДатаПолученияДанных), ТекФизическоеЛицо);
	Если МассивТекущихЛьгот = Неопределено Тогда 
		МассивТекущихЛьгот = Новый Массив;
	КонецЕсли;
	ТекущиеЛьготы = Новый ФиксированныйМассив(МассивТекущихЛьгот);
	
	Если ДоступныВсеЛьготы Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Начисления.Ссылка,
		               |	Начисления.Наименование,
		               |	Начисления.КоличествоБаллов
		               |ИЗ
		               |	ПланВидовРасчета.Начисления КАК Начисления
		               |ГДЕ
		               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыбираемаяСотрудникомЛьгота)
		               |	И НЕ Начисления.ПометкаУдаления
		               |	И НЕ Начисления.ВАрхиве";
					   
		МассивДоступныхЛьгот = Новый Массив;
		РеквизитыЛьгот = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			МассивДоступныхЛьгот.Добавить(Выборка.Ссылка);
			РеквизитыЛьготы = Новый Структура("Наименование, КоличествоБаллов", Выборка.Наименование, Выборка.КоличествоБаллов);
			РеквизитыЛьгот.Вставить(Выборка.Ссылка, РеквизитыЛьготы);
		КонецЦикла;
		
	Иначе 
		
		Запрос = ЛьготыСотрудников.ЗапросДанныеЛьгот(ТаблицаОписанийПозиций);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		МассивДоступныхЛьгот = Новый Массив;
		УникальныеЛьготы = Новый Соответствие;
		
		Выборка = РезультатыЗапроса[6].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если УникальныеЛьготы[Выборка.Льгота] <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			МассивДоступныхЛьгот.Добавить(Выборка.Льгота);
			УникальныеЛьготы.Вставить(Выборка.Льгота, Истина);
		КонецЦикла;
	
		РеквизитыЛьгот = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоступныхЛьгот, "Наименование, КоличествоБаллов");
		
	КонецЕсли;
	
	Для Каждого Льгота Из МассивВыбранныхЛьгот Цикл 
		
		РеквизитыЛьготы = РеквизитыЛьгот[Льгота];
		Если РеквизитыЛьготы = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ВыбранныеЛьготы.Добавить();
		НоваяСтрока.Льгота = Льгота;
		НоваяСтрока.Наименование = РеквизитыЛьготы.Наименование;
		НоваяСтрока.Стоимость = РеквизитыЛьготы.КоличествоБаллов;
		
	КонецЦикла;
	
	//Для Каждого Льгота Из МассивДоступныхЛьгот Цикл
	//	
	//	Если МассивВыбранныхЛьгот.Найти(Льгота) <> Неопределено Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	РеквизитыЛьготы = РеквизитыЛьгот[Льгота];
	//	Если РеквизитыЛьготы = Неопределено Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	НоваяСтрока = ДоступныеЛьготы.Добавить();
	//	НоваяСтрока.Льгота = Льгота;
	//	НоваяСтрока.Наименование = РеквизитыЛьготы.Наименование;
	//	НоваяСтрока.Стоимость = РеквизитыЛьготы.КоличествоБаллов;
	//	
	//КонецЦикла;
	//
	//ДоступныеЛьготы.Сортировать("Наименование");
	ВыбранныеЛьготы.Сортировать("Наименование");
	Возврат ВыбранныеЛьготы;
	//РазмерПакетаЛьгот = ВыбранныеЛьготы.Итог("Стоимость");
	
	
КонецФункции

Функция  СформироватьФормуГрафикаРаботыСотрудника(ТекФизЛицо)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МесяцГрафикаРаботы = НачалоМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(),1));
	МесяцГрафикаРаботыСтрокой = Формат(КонецМесяца(МесяцГрафикаРаботы),"ДЛФ=DD");
	Макет = ПолучитьОбщийМакет("ПФ_MXL_ГрафикРаботыСотрудника");
	
	ТабличныйДокументГрафикРаботы = Новый ТабличныйДокумент;
	
	ТабличныйДокументГрафикРаботы.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокументГрафикРаботы.Автомасштаб = Истина;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок|Месяц");
	ОбластьДниМесяца = Макет.ПолучитьОбласть("ДниМесяца|Месяц");
	ОбластьДниНедели = Макет.ПолучитьОбласть("ДниНедели|Месяц");
	
	ДанныеДляПечати = ДанныеДляПечатиГрафикаРаботыСотрудникаЗаМесяц(ТекФизЛицо);
	
	Выборка = ДанныеДляПечати.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Если ТабличныйДокументГрафикРаботы.ВысотаТаблицы > 0 Тогда 
			ТабличныйДокументГрафикРаботы.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьШапка.Параметры.Сотрудник = Выборка.ФИОПолные;
		ОбластьШапка.Параметры.Период = Формат(ТекущаяДатаСеанса(), "ДФ=""ММММ гггг""") + " - " + МесяцГрафикаРаботыСтрокой;
		
		ТабличныйДокументГрафикРаботы.Вывести(ОбластьШапка);
		
		КоличествоМесяцев = 0;
			
		Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
			
			ДанныеМесяца = Новый ТабличныйДокумент;
			ДанныеМесяца.ОриентацияСтраницы = ТабличныйДокументГрафикРаботы.ОриентацияСтраницы;
			ДанныеМесяца.АвтоМасштаб = ТабличныйДокументГрафикРаботы.АвтоМасштаб;
			
			ОбластьЗаголовок.Параметры.Месяц = Формат(Выборка.Месяц, "ДФ=""ММММ гггг""");
			ДанныеМесяца.Вывести(ОбластьЗаголовок);
			ДанныеМесяца.Вывести(ОбластьДниНедели);
			
			КоличествоНедель = 0;
			
			Пока Выборка.Следующий() Цикл
				
				ПоследнийДеньМесяца = КонецДня(Выборка.Дата) = КонецМесяца(Выборка.Дата);
				НомерДняНедели = ДеньНедели(Выборка.Дата);
				
				ОбластьДниМесяца.Параметры["Дата" + НомерДняНедели] = День(Выборка.Дата);
				
				Если Выборка.Часов <> 0 Тогда 
					ОбластьДниМесяца.Область(1, НомерДняНедели + 1, 1, НомерДняНедели + 1).ЦветФона = WebЦвета.Желтый;//Новый Цвет(255, 0, 0);
				КонецЕсли;
				
				Если НомерДняНедели = 7 Или ПоследнийДеньМесяца Тогда
					ДанныеМесяца.Вывести(ОбластьДниМесяца);
					ОчиститьОбластьЯчеек(ОбластьДниМесяца);
					КоличествоНедель = КоличествоНедель + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			Пока КоличествоНедель < 6 Цикл  
				ДанныеМесяца.Вывести(ОбластьДниМесяца);
				КоличествоНедель = КоличествоНедель + 1;
			КонецЦикла;
			
			ОбластьДанныеМесяца = ДанныеМесяца.ПолучитьОбласть(1, 1, 8, 8);
			Если КоличествоМесяцев % 3 = 0 Тогда 
				ТабличныйДокументГрафикРаботы.Вывести(ОбластьПустаяСтрока);
				ТабличныйДокументГрафикРаботы.Вывести(ОбластьДанныеМесяца);
			Иначе 
				ТабличныйДокументГрафикРаботы.Присоединить(ОбластьДанныеМесяца);
			КонецЕсли;
			
			КоличествоМесяцев = КоличествоМесяцев + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	Возврат ТабличныйДокументГрафикРаботы
КонецФункции

Функция ДанныеДляПечатиГрафикаРаботыСотрудникаЗаМесяц(ТекФизЛицо)

	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	МесяцГрафикаРаботы = НачалоМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(),1));
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаСеанса));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(МесяцГрафикаРаботы));
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаСеанса);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ТекФизЛицо);
	Запрос.УстановитьПараметр("Выходной", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни"));
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("Сверхурочные", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Запрос.УстановитьПараметр("Явка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	Запрос.УстановитьПараметр("ВечерниеЧасы", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	Запрос.УстановитьПараметр("НочныеЧасы", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	Запрос.УстановитьПараметр("ПолучатьПлановоеВремяЗаПолныйМесяц", Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ДатаНачала КАК ДатаНачала,
	               |	&ДатаОкончания КАК ДатаОкончания,
	               |	&ДатаОтчета КАК Период,
	               |	Сотрудники.Ссылка КАК Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудники
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
				   
	Запрос.Выполнить();		
					   			   
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ФИОПолные");
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(
		Запрос.МенеджерВременныхТаблиц, 
		НачалоМесяца(ДатаСеанса), 
		КонецМесяца(МесяцГрафикаРаботы),
		"МЕСЯЦ",
		"МЕСЯЦ",
		"ВТМесяцы");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ДатаНачала > Месяцы.Месяц
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ Месяцы.Месяц
	|	КОНЕЦ КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ) КАК ДатаОкончания,
	|	&ДатаОтчета КАК ДатаАктуальности,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Месяцы.Месяц
	|ПОМЕСТИТЬ ВТСотрудникиМесяцы
	|ИЗ
	|	ВТСотрудники КАК Сотрудники,
	|	ВТМесяцы КАК Месяцы";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанныхУчетаВремени = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыПолученияДанныхУчетаВремени.ИмяВТСотрудники = "ВТСотрудникиМесяцы";
	
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияДанныхУчетаВремени);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановоеВремя.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ПлановоеВремя.ДатаАктуальности,
	|	ПлановоеВремя.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ПлановоеВремя.Дата, МЕСЯЦ) КАК Месяц,
	|	СУММА(ПлановоеВремя.ЧасыПлан) КАК Часов
	|ИЗ
	|	ВТПлановоеВремя КАК ПлановоеВремя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ПлановоеВремя.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И (НЕ ПлановоеВремя.Дата ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановоеВремя.Сотрудник,
	|	КадровыеДанныеСотрудников.ФИОПолные,
	|	ПлановоеВремя.ДатаАктуальности,
	|	ПлановоеВремя.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Дата";
				   
	
	ДанныеДляПечати = Запрос.Выполнить();
	
	Возврат ДанныеДляПечати;
	
КонецФункции
Процедура ОчиститьОбластьЯчеек(ОбластьЯчеек)
	
	КоличествоПараметров = ОбластьЯчеек.Параметры.Количество();
	
	Для ИндексПараметра = 0 По КоличествоПараметров - 1 Цикл  
		ОбластьЯчеек.Параметры.Установить(ИндексПараметра, Неопределено);
	КонецЦикла;
	
	ОбластьЯчеек.Область(1, 1, ОбластьЯчеек.ВысотаТаблицы, ОбластьЯчеек.ШиринаТаблицы).Узор = ТипУзораТабличногоДокумента.БезУзора;
	
КонецПроцедуры                       



Функция GetList(TabNamber, DataList, Message)
	ГлавСтруктура = Новый Структура;
	Если ЗначениеЗаполнено(TabNamber) Тогда
		ТекДанныеСотрудинка = НайтиСотрудника(TabNamber);
		Если ТекДанныеСотрудинка<>Неопределено Тогда
			ГлавСтруктура.Вставить("РасчетныйЛисток",СформироватьФормуРасчетногоЛистка(ТекДанныеСотрудинка.ФизическоеЛицо,DataList));
		Иначе
			Message = "Сотрудник не найден "+TabNamber;
		КонецЕсли;
	Иначе
		Message = "Нет табельного номера";
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(ГлавСтруктура, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДанных;  
КонецФункции


Функция NewDoc1(TabNamber, Text, Message)
	Если ЗначениеЗаполнено(TabNamber) Тогда
		ТекДанныеСотрудинка = НайтиСотрудника(TabNamber);
		Если ТекДанныеСотрудинка<>Неопределено Тогда
			Попытка
				НовДок = Документы.СообщениеОНеправильныхДанныхСотрудника.СоздатьДокумент();
				НовДок.Дата = ТекущаяДата();
				НовДок.ФизическоеЛицо = ТекДанныеСотрудинка.ФизическоеЛицо;
				НовДок.ОписаниеИзменений = Text;
				НовДок.Ответственный = Пользователи.ТекущийПользователь();
				НовДок.Записать(РежимЗаписиДокумента.Проведение);
				Возврат Истина;
			исключение
				Message = ОписаниеОшибки();
				Возврат ложь;
			КонецПопытки;
		Иначе
			Message = "Сотрудник не найден "+TabNamber;
			Возврат ложь;
		КонецЕсли;
	Иначе
		Message = "Нет табельного номера";
		Возврат ложь;
	КонецЕсли;
КонецФункции


Функция NewDoc2(TabNamber, Struktura, Message)
	// Вставить содержимое обработчика.
	ВремСтруктура = Struktura.Получить();
	Если ЗначениеЗаполнено(TabNamber) Тогда
		ТекДанныеСотрудинка = НайтиСотрудника(TabNamber);
		Если ТекДанныеСотрудинка<>Неопределено Тогда
			Если ТипЗнч(ВремСтруктура)=Тип("Структура") Тогда
				Попытка
					НовДок = Документы.ЗаявкаНаОтпуск.СоздатьДокумент();
					НовДок.Дата = ТекущаяДата();
					НовДок.ДатаНачала = ВремСтруктура.ДатаНачала;
					НовДок.ДатаОкончания = ВремСтруктура.ДатаОкончания;
					НовДок.КоличествоДней = Цел((НовДок.ДатаОкончания-НовДок.ДатаНачала)/86400)+1;
					НовДок.Статус = Перечисления.СтатусыЗаявокСотрудников.Подготовлено;
					НовДок.ФизическоеЛицо = ТекДанныеСотрудинка.ФизическоеЛицо;
					НовДок.ОписаниеОтпуска = ВремСтруктура.ОписаниеОтпуска;
					НовДок.Ответственный = Пользователи.ТекущийПользователь();
					НовДок.Записать(РежимЗаписиДокумента.Проведение);
					Возврат Истина;
				исключение
					Message = ОписаниеОшибки();
					Возврат ложь;
				КонецПопытки;
			Иначе
				Message = "Не передан период";
				Возврат ложь;
			КонецЕсли;
		Иначе
			Message = "Сотрудник не найден "+TabNamber;
			Возврат ложь;
		КонецЕсли;
	Иначе
		Message = "Нет табельного номера";
		Возврат ложь;
	КонецЕсли;
	
	
КонецФункции


Функция NewDoc3(TabNamber, Struktura, Message)
	ВремСтруктура = Struktura.Получить();
	Если ЗначениеЗаполнено(TabNamber) Тогда
		ТекДанныеСотрудинка = НайтиСотрудника(TabNamber);
		Если ТекДанныеСотрудинка<>Неопределено Тогда
			Если ТипЗнч(ВремСтруктура)=Тип("Структура") Тогда
				Попытка
					НовДок = Документы.ЗапросСправкиСотрудником.СоздатьДокумент();
					НовДок.Дата = ТекущаяДата();
					НовДок.ФизическоеЛицо = ТекДанныеСотрудинка.ФизическоеЛицо;
					НовДок.ВидСправки = Справочники.ВидыПредоставляемыхСотрудникамСправок.НайтиПоНаименованию(ВремСтруктура.ВидСправки);
					НовДок.Описание = ВремСтруктура.Описание;
					НовДок.Ответственный = Пользователи.ТекущийПользователь();
					НовДок.Записать(РежимЗаписиДокумента.Проведение);
					Возврат Истина;
				исключение
					Message = ОписаниеОшибки();
					Возврат ложь;
				КонецПопытки;
			Иначе
				Message = "Не передан период";
				Возврат ложь;
			КонецЕсли;
		Иначе
			Message = "Сотрудник не найден "+TabNamber;
			Возврат ложь;
		КонецЕсли;
	Иначе
		Message = "Нет табельного номера";
		Возврат ложь;
	КонецЕсли;
КонецФункции
Функция  СобратьВидыСправок()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПредоставляемыхСотрудникамСправок.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыПредоставляемыхСотрудникамСправок КАК ВидыПредоставляемыхСотрудникамСправок
	|ГДЕ
	|	НЕ ВидыПредоставляемыхСотрудникамСправок.ПометкаУдаления
	|	И НЕ ВидыПредоставляемыхСотрудникамСправок.ВАрхиве";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НовСписок = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НовСписок.Добавить(Выборка.Наименование);
	КонецЦикла;
	Возврат НовСписок;
КонецФункции

